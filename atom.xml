<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xMuu&#39;s Blog</title>
  
  
  <link href="https://blog.xmuu.dev/atom.xml" rel="self"/>
  
  <link href="https://blog.xmuu.dev/"/>
  <updated>2021-02-05T16:51:48.800Z</updated>
  <id>https://blog.xmuu.dev/</id>
  
  <author>
    <name>xMuu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在 Ubuntu 18.04 中使用 Netplan 配置网络</title>
    <link href="https://blog.xmuu.dev/2021/02/03/config-network-in-ubuntu-18-04-with-netplan/"/>
    <id>https://blog.xmuu.dev/2021/02/03/config-network-in-ubuntu-18-04-with-netplan/</id>
    <published>2021-02-03T01:50:00.000Z</published>
    <updated>2021-02-05T16:51:48.800Z</updated>
    
    <content type="html"><![CDATA[<p>在 Ubuntu 升级到 18.04 之后（准确的是在 Ubuntu 17.10 以后），原先管理网络配置的 ifupdown 被替换成了 Netplan ，这使得之前的一些配置无法直接搬到新的系统中继续使用，所以来学习一下这个新工具，Netplan 。</p><a id="more"></a><h1 id="什么是-Netplan"><a href="#什么是-Netplan" class="headerlink" title="什么是 Netplan"></a>什么是 Netplan</h1><p>Netplan 是 Canonical 推出的一款抽象网络配置生成器，可以通过一个或多个 yaml 格式的配置文件，生成所需的网络配置，并应用到系统中。用户只需要在配置文件中描述好每个网络接口的各种参数属性，即可生成适用于 NetworkManager （一般用于桌面环境）或 Systemd-networkd （一般用于服务器环境）的网络配置。我对它的理解就是，你对于计算机网络的规划，你希望计算机的网络是什么样的，你就怎么写配置文件，它就按照你的配置文件帮你生成网络配置文件，是非常简单明了的工具。</p><p>它的工作原理如下：</p><div align=center> <img src="/img/posts/KCBbfo.png"> <br > Netplan 工作原理</div><h1 id="为什么要-Netplan"><a href="#为什么要-Netplan" class="headerlink" title="为什么要 Netplan"></a>为什么要 Netplan</h1><p>在 Netplan 没有出来之前，Ubuntu 的网络配置一直是 ifupdown 管理，配置文件冗长，可读性不高，甚至有一些是无法用配置文件进行描述的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># This file describes the network interfaces available on your system</span><br><span class="line"># and how to activate them. For more information, see interfaces(5).</span><br><span class="line"></span><br><span class="line">source &#x2F;etc&#x2F;network&#x2F;interfaces.d&#x2F;*</span><br><span class="line"></span><br><span class="line"># The loopback network interface</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"># The primary network interface</span><br><span class="line">auto ens3</span><br><span class="line">iface ens3 inet static</span><br><span class="line">        address 192.168.1.2</span><br><span class="line">        netmask 255.255.255.0</span><br><span class="line">        gateway 192.168.1.1</span><br><span class="line">        dns-nameservers 8.8.8.8 8.8.4.4</span><br></pre></td></tr></table></figure><p>而且，ifupdown 的配置文件并不能跨设备通用，每个设备的网卡信息都是固定的。在批量部署设备网络时，Netplan 拥有的 match 功能显然更胜一筹，用户可以通过名称、MAC 地址或者是内核驱动名称来匹配网络接口，从而实现用一份配置文件来配置多个设备的网络。</p><p>除此之外，Netplan 不会在引导期间进行过多的配置操作，再也不会因为开机等待 DHCP 而卡住等半天了，一些没有被配置文件涵盖的设备也不会被触发，所有的配置都是在开机的时候读取配置文件生成的，只加载必要的部分，大大提高了开机的效率。</p><p>说了这么多，让我们开始 Netplan 的配置吧。</p><h1 id="Netplan-配置文件"><a href="#Netplan-配置文件" class="headerlink" title="Netplan 配置文件"></a>Netplan 配置文件</h1><p>Netplan 的配置文件存放于三个不同的位置分别是 <code>/run/netplan/</code> ，<code>/etc/netplan/</code> 和 <code>/lib/netplan/</code> ，我们修改的是 <code>/etc/netplan/</code> 目录下的配置文件，其他两个目录会在配置生效的时候自动同步配置。你可以在配置文件目录下存放多个 yaml 文件，它们会被按照字母顺序加载，并且同名值会被后加载的覆盖。</p><h2 id="基础配置文件"><a href="#基础配置文件" class="headerlink" title="基础配置文件"></a>基础配置文件</h2><p>下面是一个基础的配置文件，这份配置文件会 NetworkManager 接管所有的网络设备，并所有以太网设备启用默认 DHCP（如果找到 DHCP 服务器的话）。如果将 <code>renderer</code> 改为 Systemd-networkd 的话，则不会启用 DHCP ，需要在配置文件指定设备才会启用。</p><p>编写配置文件的时候，缩进时要使用空格，不可使用 Tab 来缩进，空格数量不做要求，但是每一层级前面的空格数量必须相同，否则会导致配置文件读取错误。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">network-manager</span></span><br></pre></td></tr></table></figure><p>显然，这样一份配置文件是不够的，我们需要更加详细的配置文件来适应各种需求。</p><h2 id="为指定设备启用-DHCP"><a href="#为指定设备启用-DHCP" class="headerlink" title="为指定设备启用 DHCP"></a>为指定设备启用 DHCP</h2><p>为网卡 enp3s0 启用 IPv4 的 DHCP 并禁用 IPv6 的 DHCP 。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">network-manager</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">enp3s0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">dhcp6:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="为指定设备配置静态-IP"><a href="#为指定设备配置静态-IP" class="headerlink" title="为指定设备配置静态 IP"></a>为指定设备配置静态 IP</h2><p>这里我们来为网卡 enp3s0 设置一个静态的内网 IP ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">network-manager</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">enp3s0:</span></span><br><span class="line">      <span class="attr">addresses:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span><span class="string">/24</span></span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span> </span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">119.29</span><span class="number">.29</span><span class="number">.29</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">119.28</span><span class="number">.28</span><span class="number">.28</span></span><br><span class="line">          <span class="comment"># [119.29.29.29, 119.28.28.28]</span></span><br></pre></td></tr></table></figure><p>在书写这份文件的时候要注意：</p><ul><li>原本的 IP 地址和子网掩码被合二为一成为这里的 addresses ，使用的是 CIDR 表示法，而且这里是复数形式，也就是说，可以在这里写多个地址，不区分 IPv4 和 IPv6 。</li><li>网关这里使用的是 IPv4 的网关，所以名称为 gateway4 ，如果要使用 IPv6 ，则应该另起一行再写一个 gateway6 ，并设置好 IPv6 的 IP 地址。</li><li>nameservers 中的地址 addresses 我使用了两种写法，一种是列表的写法，一种是括号的写法，两种写法是等价的。</li></ul><h2 id="配置无线网卡设备"><a href="#配置无线网卡设备" class="headerlink" title="配置无线网卡设备"></a>配置无线网卡设备</h2><p>在给树莓派等设备配置网络的时候，经常会要连接 Wi-Fi ，如果有图形界面还比较简单，要是没有图形界面，可能有时候就没那么方便了。但是用 Netplan 的话，一切都很方便。下面就是一个简单的无线网络配置文件，你甚至不用声明是 WAP 认证方式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">network-manager</span></span><br><span class="line">  <span class="attr">wifis:</span></span><br><span class="line">    <span class="attr">wlp1s0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">access-points:</span></span><br><span class="line">        <span class="attr">&quot;AccessPoint1&quot;:</span> <span class="comment"># SSID</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">&quot;**********&quot;</span></span><br><span class="line">        <span class="attr">&quot;AccessPoint2&quot;:</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">&quot;**********&quot;</span></span><br></pre></td></tr></table></figure><p>如果你用的是 WAP with EAP 等比较复杂的认证方式，用 Netplan 也可以轻松解决：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">network-manager</span></span><br><span class="line">  <span class="attr">wifis:</span></span><br><span class="line">    <span class="attr">wlp1s0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">access-points:</span></span><br><span class="line">          <span class="attr">&quot;AccessPointWithEAP&quot;:</span></span><br><span class="line">            <span class="attr">auth:</span></span><br><span class="line">              <span class="attr">key-management:</span> <span class="string">eap</span> <span class="comment"># 管理系统</span></span><br><span class="line">              <span class="attr">method:</span> <span class="string">ttls</span> <span class="comment"># 认证模式</span></span><br><span class="line">              <span class="attr">anonymous-identity:</span> <span class="string">&quot;@example.com&quot;</span></span><br><span class="line">              <span class="attr">identity:</span> <span class="string">&quot;example@example.com&quot;</span></span><br><span class="line">              <span class="attr">password:</span> <span class="string">&quot;*********&quot;</span></span><br></pre></td></tr></table></figure><h2 id="多路网卡配置"><a href="#多路网卡配置" class="headerlink" title="多路网卡配置"></a>多路网卡配置</h2><p>假如你的电脑有两个网卡，同时接入了两个不同的 DHCP 网络，你可以设置优先级来让系统自动选择网络：（在这里 <code>enfirst</code> 比 <code>ensecond</code> 有着更高的优先级）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">networkd</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">enfirst:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">dhcp4-overrides:</span></span><br><span class="line">        <span class="attr">route-metric:</span> <span class="number">100</span> <span class="comment"># 优先级为 100</span></span><br><span class="line">    <span class="attr">ensecond:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">yes</span></span><br><span class="line">      <span class="attr">dhcp4-overrides:</span></span><br><span class="line">        <span class="attr">route-metric:</span> <span class="number">200</span> <span class="comment"># 优先级为 200</span></span><br></pre></td></tr></table></figure><p>除了上述这些简单常见的配置，Netplan 还支持网桥、调制解码器（Modems）、隧道、VLAN 等等设备的配置，更多的配置请参阅官网的文档。</p><h1 id="应用-Netplan-配置"><a href="#应用-Netplan-配置" class="headerlink" title="应用 Netplan 配置"></a>应用 Netplan 配置</h1><p>在编写完成配置文件后，我们可以在终端执行指令 <code>generate</code> 来生成配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan generate</span><br></pre></td></tr></table></figure><p>然后使用 <code>apply</code> 来应用生成的配置文件，必要时它会重启对应的网络服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure><p>也可以使用 <code>try</code> 来测试生成的配置文件，如果失败了，则会自动回滚到上一次的配置文件，成功则可以按 Enter 应用配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan try</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Netplan 作为新的网络配置生成器，配置文件简单，可用性高，操作方便，而且带有试错机会，可以说再也不用担心配不好 Linux 服务器的网络啦。建议大家都用一用，体验一下这种新鲜的配网方式。更多的用法就请看 Netplan 的官网啦：<a href="https://netplan.io/">https://netplan.io</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 Ubuntu 升级到 18.04 之后（准确的是在 Ubuntu 17.10 以后），原先管理网络配置的 ifupdown 被替换成了 Netplan ，这使得之前的一些配置无法直接搬到新的系统中继续使用，所以来学习一下这个新工具，Netplan 。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Ubuntu" scheme="https://blog.xmuu.dev/tags/Ubuntu/"/>
    
    <category term="Netplan" scheme="https://blog.xmuu.dev/tags/Netplan/"/>
    
  </entry>
  
  <entry>
    <title>Say Hello World Again</title>
    <link href="https://blog.xmuu.dev/2020/12/31/hello-world/"/>
    <id>https://blog.xmuu.dev/2020/12/31/hello-world/</id>
    <published>2020-12-30T16:00:00.000Z</published>
    <updated>2021-02-05T16:51:48.800Z</updated>
    
    <content type="html"><![CDATA[<p>2020 就这样过去了，这一年真的是太魔幻了，发生了各种各样的事情，胖了好多斤，但是好像没做多少事情，趁着年末，给自己换了个域名，给博客换了套主题，顺便来给自己整理一下下一年要做的事情。（立几个大的 Flag </p><a id="more"></a><h2 id="2021-成本想完成的事情："><a href="#2021-成本想完成的事情：" class="headerlink" title="2021 成本想完成的事情："></a>2021 成本想完成的事情：</h2><ul><li>按照自己的想法完善这个博客主题，搞一个夜间模式，加一些其他的模块。<br>成本版的主题在这：<a href="https://github.com/xMuu/hexo-theme-icarus">xMuu/hexo-theme-icarus</a></li><li>坚持每日一题，多刷 LeetCode 。<br>目标是刷完《剑指 Offer》，然后在 LeetCode CN 上刷完 300 道题。</li><li>完成 MyOneDay 这个自己想的小项目。<br>Java 版已经可以在酷安下载：<a href="https://www.coolapk.com/apk/274687">商店页面</a><br>今年要把功能完成，并加入数据导入导出功能，尽可能上云，提供云备份功能。</li><li>挑战任务：Codeforces 上分，目标 1400 分。<br>现在分数有点低，之前没有好好对待这个，现在要认真对待了。</li></ul><h4 id="欢迎来督促成本，督促有-wu-奖2333"><a href="#欢迎来督促成本，督促有-wu-奖2333" class="headerlink" title="欢迎来督促成本，督促有(wu)奖2333"></a>欢迎来督促成本，督促有(wu)奖2333</h4><h5 id="2021-加油，有缘的话-2077-再见。（还没玩过-2077-呜呜呜"><a href="#2021-加油，有缘的话-2077-再见。（还没玩过-2077-呜呜呜" class="headerlink" title="2021 加油，有缘的话 2077 再见。（还没玩过 2077 呜呜呜"></a>2021 加油，有缘的话 2077 再见。（还没玩过 2077 呜呜呜</h5>]]></content>
    
    
    <summary type="html">&lt;p&gt;2020 就这样过去了，这一年真的是太魔幻了，发生了各种各样的事情，胖了好多斤，但是好像没做多少事情，趁着年末，给自己换了个域名，给博客换了套主题，顺便来给自己整理一下下一年要做的事情。（立几个大的 Flag &lt;/p&gt;</summary>
    
    
    
    <category term="Daily" scheme="https://blog.xmuu.dev/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>打造一个有不同 Item 布局的 RecyclerView</title>
    <link href="https://blog.xmuu.dev/2020/07/25/android-recycler-view-with-many-styles/"/>
    <id>https://blog.xmuu.dev/2020/07/25/android-recycler-view-with-many-styles/</id>
    <published>2020-07-25T11:36:00.000Z</published>
    <updated>2021-02-05T16:51:48.800Z</updated>
    
    <content type="html"><![CDATA[<p>RecyclerView 作为 ListView 的升级版，其强大的性能和极高的灵活性使得可以在项目中实现更多的列表效果，比如瀑布流、自定义 Header 和 Footer 、不同内容的 Item 布局等，今天就利用 RecyclerView 来实现一个根据内容变化 Item 布局的列表布局，并添加一个横向滑动的列表作为 Header 。用到的主要是 RecyclerView.Adapter 中关于 View Type 的一些设定。</p><a id="more"></a><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>首先我们先新建一个类 ListItem 作为存放列表内容的对象。</p><blockquote><p>ListItem.class</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class ListItem &#123;</span><br><span class="line">    int type;       &#x2F;&#x2F; Item 的类型</span><br><span class="line">    String title;   &#x2F;&#x2F; Item 的标题</span><br><span class="line">    String brief;   &#x2F;&#x2F; Item 的简介</span><br><span class="line">    String image;   &#x2F;&#x2F; Item 的图片</span><br><span class="line"></span><br><span class="line">    public ListItem(int type, String title, String brief, String image) &#123;</span><br><span class="line">        this.type &#x3D; type;</span><br><span class="line">        this.title &#x3D; title;</span><br><span class="line">        this.brief &#x3D; brief;</span><br><span class="line">        this.image &#x3D; image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="列表样式设计"><a href="#列表样式设计" class="headerlink" title="列表样式设计"></a>列表样式设计</h2><p>这里我设计了 5 个不同的样式：列表的头部、仅有文字的列表项目、带有小图片的列表项目、带有大图片的列表项目和列表的尾部。<br>列表的头部的是常见的左右滚动形式，其他几个部分则是简单的 Card ，最后列表的尾部为一行文字。<br><img src="/img/posts/cmVjeW.png" alt="效果图"></p><p>为了不贴出太多代码，影响阅读体验，这里就放出头部的和仅有文字的列表项目的 XML 文件，其他的文件会在项目的 GitHub Repo 中放出。</p><blockquote><p>item_list_header.xml</p></blockquote><blockquote><p>这里使用一个 HorizontalScrollView 包裹一个 LinearLayout 实现横向滚动效果，实际使用时可以用一个横向的 RecyclerView 替代。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;HorizontalScrollView</span><br><span class="line">    xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:scrollbars&#x3D;&quot;none&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:orientation&#x3D;&quot;horizontal&quot;</span><br><span class="line">        android:scrollbars&#x3D;&quot;none&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;androidx.cardview.widget.CardView</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;200dp&quot;</span><br><span class="line">            android:layout_marginVertical&#x3D;&quot;16dp&quot;</span><br><span class="line">            android:layout_marginStart&#x3D;&quot;16dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id&#x3D;&quot;@+id&#x2F;header_image_1&quot;</span><br><span class="line">                android:layout_width&#x3D;&quot;300dp&quot;</span><br><span class="line">                android:layout_height&#x3D;&quot;200dp&quot;</span><br><span class="line">                android:contentDescription&#x3D;&quot;@string&#x2F;image_description&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;androidx.cardview.widget.CardView&gt;</span><br><span class="line"></span><br><span class="line">        ... ...</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;HorizontalScrollView&gt;</span><br></pre></td></tr></table></figure><blockquote><p>item_text_only.xml</p></blockquote><blockquote><p>简单的一个 CardView 。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;androidx.cardview.widget.CardView</span><br><span class="line">    xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    android:layout_margin&#x3D;&quot;16dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;androidx.constraintlayout.widget.ConstraintLayout</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;item_title&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_margin&#x3D;&quot;16dp&quot;</span><br><span class="line">            android:textSize&#x3D;&quot;20sp&quot;</span><br><span class="line">            app:layout_constraintStart_toStartOf&#x3D;&quot;parent&quot;</span><br><span class="line">            app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;item_brief&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginStart&#x3D;&quot;16dp&quot;</span><br><span class="line">            android:layout_marginBottom&#x3D;&quot;16dp&quot;</span><br><span class="line">            android:textSize&#x3D;&quot;16sp&quot;</span><br><span class="line">            app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class="line">            app:layout_constraintStart_toStartOf&#x3D;&quot;parent&quot;</span><br><span class="line">            app:layout_constraintTop_toBottomOf&#x3D;&quot;@id&#x2F;item_title&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;androidx.cardview.widget.CardView&gt;</span><br></pre></td></tr></table></figure><h2 id="创建-Adapter"><a href="#创建-Adapter" class="headerlink" title="创建 Adapter"></a>创建 Adapter</h2><blockquote><p>ListAdapter.java</p></blockquote><blockquote><p>这里大体跟一般使用 RecyclerView.Adapter 一样，但是重写了 getItemViewType() 方法，根据 position 返回不同的 Type ，getItemCount() 的返回值也从一般的列表 Size 变成了 Size + 2 ，因为多了头部和尾部两个项目。其他的一些改动请看代码，部分重复或无关代码已省略。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">public class ListAdapter extends RecyclerView.Adapter&lt;ListAdapter.ItemViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    ... ...</span><br><span class="line"></span><br><span class="line">    public ListAdapter(Context context, List&lt;ListItem&gt; mData) &#123;</span><br><span class="line">        this.mContext &#x3D; context;</span><br><span class="line">        this.mData &#x3D; mData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemViewType(int position) &#123;</span><br><span class="line">        &#x2F;&#x2F; 根据位置和内容判断布局类型</span><br><span class="line">        if (position &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            return TYPE_HEADER;</span><br><span class="line">        &#125; else if (position &#x3D;&#x3D; getItemCount() - 1) &#123;</span><br><span class="line">            return TYPE_FOOTER;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return mData.get(position - 1).type;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @NonNull</span><br><span class="line">    @Override</span><br><span class="line">    public ItemViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) &#123;</span><br><span class="line">        &#x2F;&#x2F; 应用不同布局</span><br><span class="line">        switch (viewType) &#123;</span><br><span class="line">            case TYPE_HEADER:</span><br><span class="line">                return new ItemViewHolder(LayoutInflater.from(parent.getContext()).inflate(</span><br><span class="line">                        R.layout.item_list_header, parent, false), viewType);</span><br><span class="line">            case TYPE_NO_IMAGE:</span><br><span class="line">                return new ItemViewHolder(LayoutInflater.from(parent.getContext()).inflate(</span><br><span class="line">                        R.layout.item_text_only, parent, false), viewType);</span><br><span class="line">            case TYPE_SMALL_IMAGE:</span><br><span class="line">                return new ItemViewHolder(LayoutInflater.from(parent.getContext()).inflate(</span><br><span class="line">                        R.layout.item_text_with_small_image, parent, false), viewType);</span><br><span class="line">            case TYPE_BIG_IMAGE:</span><br><span class="line">                return new ItemViewHolder(LayoutInflater.from(parent.getContext()).inflate(</span><br><span class="line">                        R.layout.item_text_with_big_image, parent, false), viewType);</span><br><span class="line">            default:</span><br><span class="line">                return new ItemViewHolder(LayoutInflater.from(parent.getContext()).inflate(</span><br><span class="line">                        R.layout.item_list_footer, parent, false), viewType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onBindViewHolder(@NonNull ItemViewHolder holder, int position) &#123;</span><br><span class="line">        &#x2F;&#x2F;  根据类型对内容进行设置</span><br><span class="line">        if (holder.type &#x3D;&#x3D; TYPE_HEADER) &#123;</span><br><span class="line">            String imgURL1 &#x3D; &quot;file:&#x2F;&#x2F;&#x2F;android_asset&#x2F;1.jpg&quot;;</span><br><span class="line">            Glide.with(mContext)</span><br><span class="line">                    .load(imgURL1)</span><br><span class="line">                    .centerCrop()</span><br><span class="line">                    .into(holder.headerImage1);</span><br><span class="line">            ... ...</span><br><span class="line">        &#125; else if (holder.type !&#x3D; TYPE_FOOTER) &#123;</span><br><span class="line">            holder.textTitle.setText(mData.get(position - 1).title);</span><br><span class="line">            holder.textBrief.setText(mData.get(position - 1).brief);</span><br><span class="line">            if (holder.type &#x3D;&#x3D; 2 || holder.type &#x3D;&#x3D; 3) &#123;</span><br><span class="line">                &#x2F;&#x2F; 简单的图片加载</span><br><span class="line">                String imgURL &#x3D; &quot;file:&#x2F;&#x2F;&#x2F;android_asset&#x2F;&quot; + mData.get(position - 1).image + &quot;.jpg&quot;;</span><br><span class="line">                Glide.with(mContext)</span><br><span class="line">                        .load(imgURL)</span><br><span class="line">                        .centerCrop()</span><br><span class="line">                        .into(holder.imageView);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemCount() &#123;</span><br><span class="line">        &#x2F;&#x2F; 计算头部和尾部项目</span><br><span class="line">        return mData.size() + 2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class ItemViewHolder extends RecyclerView.ViewHolder &#123;</span><br><span class="line"></span><br><span class="line">        int type;</span><br><span class="line">        ImageView headerImage1, headerImage2, headerImage3;</span><br><span class="line">        TextView textTitle, textBrief;</span><br><span class="line">        ImageView imageView;</span><br><span class="line"></span><br><span class="line">        public ItemViewHolder(@NonNull View itemView, int viewType) &#123;</span><br><span class="line">            super(itemView);</span><br><span class="line">            this.type &#x3D; viewType;</span><br><span class="line">            textTitle &#x3D; itemView.findViewById(R.id.item_title);</span><br><span class="line">            textBrief &#x3D; itemView.findViewById(R.id.item_brief);</span><br><span class="line">            &#x2F;&#x2F; 根据不同布局设置界面元素</span><br><span class="line">            if (viewType &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                headerImage1 &#x3D; itemView.findViewById(R.id.header_image_1);</span><br><span class="line">                headerImage2 &#x3D; itemView.findViewById(R.id.header_image_2);</span><br><span class="line">                headerImage3 &#x3D; itemView.findViewById(R.id.header_image_3);</span><br><span class="line">            &#125;</span><br><span class="line">            if (viewType &#x3D;&#x3D; 2 || viewType &#x3D;&#x3D; 3) &#123;</span><br><span class="line">                imageView &#x3D; itemView.findViewById(R.id.item_image);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实装-RecyclerView"><a href="#实装-RecyclerView" class="headerlink" title="实装 RecyclerView"></a>实装 RecyclerView</h2><p>这部分就是给 RecyclerView 设置刚刚完成的 Adapter ，然后填上对应的内容，至此，整个列表就完成了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Toolbar toolbar &#x3D; findViewById(R.id.toolbar);</span><br><span class="line">        setSupportActionBar(toolbar);</span><br><span class="line">        &#x2F;&#x2F; 设置列表内容</span><br><span class="line">        List&lt;ListItem&gt; listItems &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        listItems.add(new ListItem(1, &quot;标题1&quot;, &quot;简介1&quot;, &quot;1&quot;));</span><br><span class="line">        listItems.add(new ListItem(2, &quot;标题2&quot;, &quot;简介2&quot;, &quot;2&quot;));</span><br><span class="line">        listItems.add(new ListItem(3, &quot;标题3&quot;, &quot;简介3&quot;, &quot;3&quot;));</span><br><span class="line">        &#x2F;&#x2F; 设置 RecyclerView </span><br><span class="line">        RecyclerView recyclerView &#x3D; findViewById(R.id.recycler_view);</span><br><span class="line">        recyclerView.setLayoutManager(new LinearLayoutManager(this));</span><br><span class="line">        recyclerView.setAdapter(new ListAdapter(this, listItems));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>就是上面那个图片啦，我是做出来才截图的。</p><h2 id="源码以及-Demo"><a href="#源码以及-Demo" class="headerlink" title="源码以及 Demo"></a>源码以及 Demo</h2><p>整个过程的源码已经上传到 GitHub ，项目地址：<a href="https://github.com/xMuu/RecyclerViewDemo">点这里</a> ，如有错误或瑕疵，欢迎提出。</p><p>如果想试试整个 App 的效果可以到<a href="https://github.com/xMuu/RecyclerViewDemo/releases">这里</a>下载体验。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;RecyclerView 作为 ListView 的升级版，其强大的性能和极高的灵活性使得可以在项目中实现更多的列表效果，比如瀑布流、自定义 Header 和 Footer 、不同内容的 Item 布局等，今天就利用 RecyclerView 来实现一个根据内容变化 Item 布局的列表布局，并添加一个横向滑动的列表作为 Header 。用到的主要是 RecyclerView.Adapter 中关于 View Type 的一些设定。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://blog.xmuu.dev/categories/Android/"/>
    
    
    <category term="Android" scheme="https://blog.xmuu.dev/tags/Android/"/>
    
    <category term="RecyclerView" scheme="https://blog.xmuu.dev/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>Android 开发中使用 Room 快速构建 SQLite 数据库</title>
    <link href="https://blog.xmuu.dev/2020/04/14/android-using-room-to-build-a-sqlite-database-quickly/"/>
    <id>https://blog.xmuu.dev/2020/04/14/android-using-room-to-build-a-sqlite-database-quickly/</id>
    <published>2020-04-14T06:20:31.000Z</published>
    <updated>2021-02-05T16:51:48.800Z</updated>
    
    <content type="html"><![CDATA[<p>Room 是 Google 提供的一个 ORM (Object Relational Mapping) 库，可以在 Android 开发中快速流畅地进行数据库访问。Room 提供了一个访问 SQLite 的抽象层，通过解析注解内容自动生成对应代码，大大提高了开发的效率。</p><a id="more"></a><p>Room 包含 3 个主要组件：</p><ul><li><a href="https://developer.android.google.cn/reference/androidx/room/Database?hl=zh-cn"><strong>数据库</strong></a>：包含数据库持有者，并作为应用已保留的持久关系型数据的底层连接的主要接入点。</li><li><a href="https://developer.android.google.cn/training/data-storage/room/accessing-data?hl=zh-cn"><strong>DAO</strong></a>：包含用于访问数据库的方法。</li><li><a href="https://developer.android.google.cn/training/data-storage/room/defining-data?hl=zh-cn"><strong>Entity</strong></a>：表示数据库中的表。</li></ul><p><img src="/img/posts/KDuBNM.png" alt="room_architecture.png"></p><p>具体的各个组件的说明请查阅官方文档（<a href="https://developer.android.google.cn/training/data-storage/room?hl=zh-cn">地址</a>）。下面将讲解如何使用 Room 快速构建一个数据库并配合 RecyclerView 输出数据库内容，实现一个简单的购物清单。</p><blockquote><p>文中代码重复度较高的地方会进行省略，如果需要完整代码请到文末 GitHub 仓库获取</p></blockquote><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><p>在 Android Studio 中创建一个新工程，这里我选用 Basic Activity 模板，你可以根据自己的需求选不同的模板来创建工程。</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>在应用或模块的 build.gradle 文件中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  &#x2F;&#x2F; 设置 Room 版本，此处可能不是最新版，请自行选择是否更新到最新版</span><br><span class="line">  def room_version &#x3D; &quot;2.2.5&quot;</span><br><span class="line"></span><br><span class="line">  implementation &quot;androidx.room:room-runtime:$room_version&quot;</span><br><span class="line">  annotationProcessor &quot;androidx.room:room-compiler:$room_version&quot; </span><br><span class="line">  &#x2F;&#x2F; For Kotlin use kapt instead of annotationProcessor</span><br><span class="line">  &#x2F;&#x2F; 对于 Kotlin 用户请使用 kapt 代替 annotationProcessor</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; optional - Kotlin Extensions and Coroutines support for Room</span><br><span class="line">  &#x2F;&#x2F; 可选 - Kotlin 扩展和 Coroutines 支持</span><br><span class="line">  implementation &quot;androidx.room:room-ktx:$room_version&quot;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; optional - RxJava support for Room</span><br><span class="line">  &#x2F;&#x2F; 可选 - RxJava 支持</span><br><span class="line">  implementation &quot;androidx.room:room-rxjava2:$room_version&quot;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; optional - Guava support for Room, including Optional and ListenableFuture</span><br><span class="line">  &#x2F;&#x2F; 可选 - Guava 支持</span><br><span class="line">  implementation &quot;androidx.room:room-guava:$room_version&quot;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; Test helpers</span><br><span class="line">  &#x2F;&#x2F; 测试工具</span><br><span class="line">  testImplementation &quot;androidx.room:room-testing:$room_version&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加完成后记得点击右上角的 Sync Now 同步一下依赖。</p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><h3 id="创建-Entity"><a href="#创建-Entity" class="headerlink" title="创建 Entity"></a>创建 Entity</h3><p>新建一个名为 <code>ListItem.java</code> 的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@Entity(tableName &#x3D; &quot;items&quot;) &#x2F;&#x2F; 自定义表名</span><br><span class="line">public class ListItem &#123;</span><br><span class="line">    @PrimaryKey(autoGenerate &#x3D; true) &#x2F;&#x2F; 注明此元素为主键并自动生成</span><br><span class="line">    public int ID;</span><br><span class="line"></span><br><span class="line">    @ColumnInfo(name &#x3D; &quot;ItemName&quot;) &#x2F;&#x2F; 自定义列名</span><br><span class="line">    public String Name;</span><br><span class="line"></span><br><span class="line">    @ColumnInfo(name &#x3D; &quot;ItemNumber&quot;, defaultValue &#x3D; &quot;1&quot;) &#x2F;&#x2F; 设置默认值</span><br><span class="line">    public String Number;</span><br><span class="line"></span><br><span class="line">    @ColumnInfo(name &#x3D; &quot;ItemStatus&quot;, defaultValue &#x3D; &quot;false&quot;)</span><br><span class="line">    public boolean Status;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 需要手动创建一个空的构造函数，否则编译时会报错</span><br><span class="line">    public ListItem() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 这个是为了创建对象时方便的构造函数</span><br><span class="line">    public ListItem(String name, String number) &#123;</span><br><span class="line">        Name &#x3D; name;</span><br><span class="line">        Number &#x3D; number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 必须为所有的列创建 getter 和 setter 以便进行访问</span><br><span class="line">    public int getID() &#123;</span><br><span class="line">        return ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setID(int ID) &#123;</span><br><span class="line">        this.ID &#x3D; ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-DAO"><a href="#实现-DAO" class="headerlink" title="实现 DAO"></a>实现 DAO</h3><p>DAO(Data Access Object, 中文为数据访问对象) 是一个面向对象的数据库接口，所以我们新建一个 <code>interface</code> 名为 <code>ListItemDAO.java</code> ，实现数据操作的一些定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Dao</span><br><span class="line">public interface ListItemDAO &#123;</span><br><span class="line">    @Insert &#x2F;&#x2F; 插入操作</span><br><span class="line">    void insert(ListItem... items); &#x2F;&#x2F; 对象类后加三个点表示多个对象，添加时使用逗号分隔</span><br><span class="line"></span><br><span class="line">    @Delete &#x2F;&#x2F; 删除操作</span><br><span class="line">    void delete(ListItem... items);</span><br><span class="line"></span><br><span class="line">    @Update &#x2F;&#x2F; 更新操作</span><br><span class="line">    void update(ListItem... items);</span><br><span class="line"></span><br><span class="line">    @Query(&quot;SELECT * FROM items&quot;) &#x2F;&#x2F; 查询全部数据，可根据需求添加查询条件</span><br><span class="line">    LiveData&lt;List&lt;ListItem&gt;&gt; getAllItems();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建-AppDatabase"><a href="#创建-AppDatabase" class="headerlink" title="创建 AppDatabase"></a>创建 AppDatabase</h3><p>这一步我们来创建整个 App 的数据库。新建一个文件名为 <code>AppDatabase.java</code> ，设置其为 <code>abstract</code> 并继承于 <code>RoomDatabase</code> ：</p><blockquote><p>如果您的应用在单个进程中运行，则在实例化 <code>AppDatabase</code> 对象时应遵循单例设计模式。每个 <code>RoomDatabase</code> 实例的成本相当高，而您几乎不需要在单个进程中访问多个实例。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Database(entities &#x3D; &#123;ListItem.class&#125;, version &#x3D; 1, exportSchema &#x3D; false)</span><br><span class="line">&#x2F;&#x2F; 注解中设置好需要使用的实体 entities ，多个请用逗号隔开</span><br><span class="line">&#x2F;&#x2F; 版本号 version 必须要写，以便后期升级迁移数据库</span><br><span class="line">&#x2F;&#x2F; exportSchema 如果有需求请打开并实现相应内容，如没实现且没关闭，编译将会报错</span><br><span class="line">public abstract class AppDatabase extends RoomDatabase &#123;</span><br><span class="line">    &#x2F;&#x2F; 实现单例模式</span><br><span class="line">    private static AppDatabase INSTANCE; </span><br><span class="line"></span><br><span class="line">    public static synchronized AppDatabase getAppDatabase(Context context) &#123;</span><br><span class="line">        if (INSTANCE &#x3D;&#x3D; null) &#123;</span><br><span class="line">            INSTANCE &#x3D; Room.databaseBuilder(context.getApplicationContext(), </span><br><span class="line">                        AppDatabase.class, &quot;AppDatabase&quot;).build();</span><br><span class="line">        &#125;</span><br><span class="line">        return INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 添加对应的 Dao</span><br><span class="line">    public abstract ListItemDAO getListItemDAO();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，整个数据库已经创建完毕，可以通过 DAO 对数据库进行操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 插入数据</span><br><span class="line">ListItem example &#x3D; new ListItem(&quot;牙刷&quot;, 2);</span><br><span class="line">AppDatabase appDatabase &#x3D; AppDatabase.getAppDatabase(context);</span><br><span class="line">ListItemDAO listItemDAO &#x3D; appDatabase.getListItemDAO();</span><br><span class="line">listItemDAO.insert(example);</span><br></pre></td></tr></table></figure><p>但是这样操作存在一定问题：</p><ul><li>直接调用的话，对数据库的操作在主线程上执行，可能会因数据过大而造成 UI 卡顿</li><li>每次都要获取 AppDatabase 实例和 ListItemDAO ，过程繁琐，代码重复</li></ul><p>所以我们来新建一个仓库，用来简化代码，并实现多线程来进行数据库操作，避免卡顿。</p><h3 id="创建操作仓库"><a href="#创建操作仓库" class="headerlink" title="创建操作仓库"></a>创建操作仓库</h3><p>新建名为 <code>ListItemRepository.java</code> 的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public class ListItemRepository &#123;</span><br><span class="line">    private ListItemDAO listItemDAO;</span><br><span class="line"></span><br><span class="line">    public ListItemRepository(Context context) &#123;</span><br><span class="line">        &#x2F;&#x2F; 获取 AppDatabase 并获取对应 DAO</span><br><span class="line">        AppDatabase appDatabase &#x3D; AppDatabase.getAppDatabase(context);</span><br><span class="line">        listItemDAO &#x3D; appDatabase.getListItemDAO();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; LiveData 类型会自动在进行多线程操作，无需手动新建多线程异步操作任务</span><br><span class="line">    public LiveData&lt;List&lt;ListItem&gt;&gt; getAllItems() &#123;</span><br><span class="line">        return listItemDAO.getAllItems();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 调用多线程异步操作任务</span><br><span class="line">    public void addListItem(ListItem... items) &#123;</span><br><span class="line">        new insertAsyncTask(listItemDAO).execute(items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建多线程异步操作任务</span><br><span class="line">    static class insertAsyncTask extends AsyncTask&lt;ListItem, Void, Void&gt; &#123;</span><br><span class="line">        private ListItemDAO listItemDAO;</span><br><span class="line"></span><br><span class="line">        insertAsyncTask(ListItemDAO listItemDAO) &#123;</span><br><span class="line">            this.listItemDAO &#x3D; listItemDAO;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        protected Void doInBackground(ListItem... items) &#123;</span><br><span class="line">            listItemDAO.insert(items);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在我们就可以用这样的方式来操作数据库了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 一次创建，多次使用，多线程操作，不会导致 UI 卡顿</span><br><span class="line">ListItem example &#x3D; new ListItem(&quot;牙刷&quot;, 2);</span><br><span class="line">ListItemRepository repository &#x3D; new ListItemRepository(context);</span><br><span class="line">repository.addListItem(example);</span><br><span class="line">repository.addListItem(example);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 也可以直接新建一个仓库并使用</span><br><span class="line">new ListItemRepository(context).updateListItem(temp);</span><br></pre></td></tr></table></figure><p>这样代码写起来就非常方便了，不用再啰啰嗦嗦去获取 DAO 。</p><h2 id="创建-RecyclerView"><a href="#创建-RecyclerView" class="headerlink" title="创建 RecyclerView"></a>创建 RecyclerView</h2><p>现在我们来正式使用数据库。在布局文件中添加 RecyclerView 并新建对应文件。这里以 <code>fragment_first.xml</code> 为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    tools:context&#x3D;&quot;.FirstFragment&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;list&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintEnd_toEndOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintStart_toStartOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure><h3 id="创建布局文件"><a href="#创建布局文件" class="headerlink" title="创建布局文件"></a>创建布局文件</h3><p>以 <code>item_list.xml</code> 为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    android:id&#x3D;&quot;@+id&#x2F;list_item&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;CheckBox</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;checkbox&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:clickable&#x3D;&quot;false&quot;</span><br><span class="line">        android:layout_margin&#x3D;&quot;10dp&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintStart_toStartOf&#x3D;&quot;parent&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;item_name&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:textSize&#x3D;&quot;24sp&quot;</span><br><span class="line">        android:text&#x3D;&quot;@string&#x2F;app_name&quot;</span><br><span class="line">        android:layout_marginHorizontal&#x3D;&quot;10dp&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintStart_toEndOf&#x3D;&quot;@id&#x2F;checkbox&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;item_number&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:textSize&#x3D;&quot;22sp&quot;</span><br><span class="line">        android:text&#x3D;&quot;@string&#x2F;app_name&quot;</span><br><span class="line">        android:layout_marginHorizontal&#x3D;&quot;20dp&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintEnd_toEndOf&#x3D;&quot;parent&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure><h3 id="创建-Adapter"><a href="#创建-Adapter" class="headerlink" title="创建 Adapter"></a>创建 Adapter</h3><p>以 <code>ListAdapter.java</code> 为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">public class ListAdapter extends RecyclerView.Adapter&lt;ListAdapter.ItemViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;ListItem&gt; mData;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 创建构造函数，传入数据</span><br><span class="line">    public ListAdapter(List&lt;ListItem&gt; mData) &#123;</span><br><span class="line">        this.mData &#x3D; mData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @NonNull</span><br><span class="line">    @Override</span><br><span class="line">    public ItemViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) &#123;</span><br><span class="line">        return new ItemViewHolder(LayoutInflater.from(parent.getContext()).inflate(</span><br><span class="line">                R.layout.item_list, parent, false));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 重写元素绑定逻辑</span><br><span class="line">    @Override</span><br><span class="line">    public void onBindViewHolder(@NonNull ItemViewHolder holder, final int position) &#123;</span><br><span class="line">        &#x2F;&#x2F; 设置元素内容</span><br><span class="line">        holder.itemStatus.setChecked(mData.get(position).Status);</span><br><span class="line">        holder.itemName.setText(mData.get(position).Name);</span><br><span class="line">        String number &#x3D; &quot;数量：&quot; + mData.get(position).Number;</span><br><span class="line">        holder.itemNumber.setText(number);</span><br><span class="line">        &#x2F;&#x2F; 添加单击修改状态事件</span><br><span class="line">        holder.itemView.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                ListItem temp &#x3D; mData.get(position);</span><br><span class="line">                temp.Status &#x3D; !temp.Status;</span><br><span class="line">                new ListItemRepository(v.getContext()).updateListItem(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F; 添加长按删除事件</span><br><span class="line">        holder.itemView.setOnLongClickListener(new View.OnLongClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean onLongClick(View v) &#123;</span><br><span class="line">                final ListItem temp &#x3D; mData.get(position);</span><br><span class="line">                new ListItemRepository(v.getContext()).deleteListItem(temp);</span><br><span class="line">                Snackbar.make(v, &quot;物品已删除&quot;, Snackbar.LENGTH_LONG)</span><br><span class="line">                        .setAction(&quot;撤销&quot;, new View.OnClickListener() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public void onClick(View v) &#123;</span><br><span class="line">                                new ListItemRepository(v.getContext()).addListItem(temp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;).show();</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemCount() &#123;</span><br><span class="line">        return mData.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 绑定列表项目的各个元素</span><br><span class="line">    static class ItemViewHolder extends RecyclerView.ViewHolder &#123;</span><br><span class="line">        CheckBox itemStatus;</span><br><span class="line">        TextView itemName, itemNumber;</span><br><span class="line">        ItemViewHolder(@NonNull View itemView) &#123;</span><br><span class="line">            super(itemView);</span><br><span class="line">            itemStatus &#x3D; itemView.findViewById(R.id.checkbox);</span><br><span class="line">            itemName &#x3D; itemView.findViewById(R.id.item_name);</span><br><span class="line">            itemNumber &#x3D; itemView.findViewById(R.id.item_number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置-RecyclerView"><a href="#设置-RecyclerView" class="headerlink" title="设置 RecyclerView"></a>设置 RecyclerView</h3><p>在对应的位置添加上 RecyclerView 的初始化代码，这里以 <code>FirstFragment.java</code> 为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class FirstFragment extends Fragment &#123;</span><br><span class="line"></span><br><span class="line">    private RecyclerView recyclerView;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container, </span><br><span class="line">                              Bundle savedInstanceState) &#123;</span><br><span class="line">        return inflater.inflate(R.layout.fragment_first, container, false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onViewCreated(view, savedInstanceState);</span><br><span class="line">        ListItemRepository repository &#x3D; new ListItemRepository(view.getContext());</span><br><span class="line">        &#x2F;&#x2F; 绑定 RecyclerView</span><br><span class="line">        recyclerView &#x3D; view.findViewById(R.id.list);</span><br><span class="line">        &#x2F;&#x2F; 设置 RecyclerView 布局管理器</span><br><span class="line">        recyclerView.setLayoutManager(new LinearLayoutManager(view.getContext()));</span><br><span class="line">        &#x2F;&#x2F; 动态监听 ListItem 的变化并设置 RecyclerView Adapter</span><br><span class="line">        repository.getAllItems().observe(getViewLifecycleOwner(), new Observer&lt;List&lt;ListItem&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onChanged(List&lt;ListItem&gt; listItems) &#123;</span><br><span class="line">                recyclerView.setAdapter(new ListAdapter(listItems));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加按钮功能"><a href="#添加按钮功能" class="headerlink" title="添加按钮功能"></a>添加按钮功能</h2><p>给 <code>MainActivity</code> 的浮动按钮添加一个弹出对话框的效果，用来添加新物品到数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private ListItemRepository repository;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Toolbar toolbar &#x3D; findViewById(R.id.toolbar);</span><br><span class="line">        setSupportActionBar(toolbar);</span><br><span class="line">        repository &#x3D; new ListItemRepository(getApplicationContext());</span><br><span class="line"></span><br><span class="line">        FloatingActionButton fab &#x3D; findViewById(R.id.fab);</span><br><span class="line">        &#x2F;&#x2F; 为浮动按钮设置点击监听</span><br><span class="line">        fab.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) &#123;</span><br><span class="line">                createNewItemDialog(view).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 创建对话框</span><br><span class="line">    private AlertDialog createNewItemDialog(final View view) &#123;</span><br><span class="line">        final View dialogView;</span><br><span class="line">        LayoutInflater inflater &#x3D; getLayoutInflater();</span><br><span class="line">        AlertDialog.Builder builder &#x3D; new AlertDialog.Builder(Objects.requireNonNull(view.getContext()));</span><br><span class="line">        dialogView &#x3D; inflater.inflate(R.layout.dialog_layout, null);</span><br><span class="line">        builder.setTitle(&quot;添加新物品&quot;).setView(dialogView);</span><br><span class="line">        builder.setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class="line">                TextInputEditText itemNameInput &#x3D; dialogView.findViewById(R.id.item_name_input);</span><br><span class="line">                TextInputEditText itemNumberInput &#x3D; dialogView.findViewById(R.id.item_number_input);</span><br><span class="line">                String name &#x3D; Objects.requireNonNull(itemNameInput.getText()).toString();</span><br><span class="line">                String number &#x3D; Objects.requireNonNull(itemNumberInput.getText()).toString();</span><br><span class="line">                if (!name.equals(&quot;&quot;)) &#123;</span><br><span class="line">                    repository.addListItem(new ListItem(name, number));</span><br><span class="line">                    Snackbar.make(view, &quot;物品已添加&quot;, Snackbar.LENGTH_SHORT).show();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    Snackbar.make(view, &quot;物品名称不能为空&quot;, Snackbar.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        builder.setNegativeButton(&quot;取消&quot;, null);</span><br><span class="line">        return builder.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>布局不太好看，不要介意，看效果就好。</p><p><img src="/img/posts/EgIUnK.png" alt="效果图"></p><h2 id="源码以及-Demo"><a href="#源码以及-Demo" class="headerlink" title="源码以及 Demo"></a>源码以及 Demo</h2><p>整个过程的源码已经上传到 GitHub ，项目地址：<a href="https://github.com/xMuu/Shopping-List">点这里</a> ，如有错误或瑕疵，欢迎提出。</p><p>如果想试试整个 App 的效果可以到<a href="https://github.com/xMuu/Shopping-List/releases">这里</a>下载体验。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Room 是 Google 提供的一个 ORM (Object Relational Mapping) 库，可以在 Android 开发中快速流畅地进行数据库访问。Room 提供了一个访问 SQLite 的抽象层，通过解析注解内容自动生成对应代码，大大提高了开发的效率。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://blog.xmuu.dev/categories/Android/"/>
    
    
    <category term="Android" scheme="https://blog.xmuu.dev/tags/Android/"/>
    
    <category term="Room" scheme="https://blog.xmuu.dev/tags/Room/"/>
    
    <category term="SQLite" scheme="https://blog.xmuu.dev/tags/SQLite/"/>
    
    <category term="Database" scheme="https://blog.xmuu.dev/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>修复 Android Studio 自带的 BottomNavigationView 中 Fragment 位置错误</title>
    <link href="https://blog.xmuu.dev/2020/03/14/fix-fragment-position-in-bottom-navigation-view/"/>
    <id>https://blog.xmuu.dev/2020/03/14/fix-fragment-position-in-bottom-navigation-view/</id>
    <published>2020-03-14T09:25:08.000Z</published>
    <updated>2021-02-05T16:51:48.800Z</updated>
    
    <content type="html"><![CDATA[<p>最近在玩 Android Studio 里面的 BottomNavigationView ，在使用的时候发现了一点问题，自动创建的 Fragment 位置会偏下，研究了一下，找到了修复位置错误的办法。</p><a id="more"></a><h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL; DR"></a>TL; DR</h1><ul><li>删除 <code>activity_main.xml</code> 中的 <code>android:paddingTop=&quot;?attr/actionBarSize&quot;</code> 属性</li><li>为 <code>activity_main.xml</code> 中的 <code>nav_host_fragment</code> 添加 <code>android:layout_marginBottom=&quot;?attr/actionBarSize&quot;</code> 属性</li></ul><h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><p>新建完 BottomNavigationView 后通过虚拟机启动，可以看到以下画面，没有别的元素时，不会发现问题。（其实如果眼尖一点，可以发现文字不是居中的。）</p><p><img src="/img/posts/ueTXKU.png" alt="初始效果"></p><p>但是如果我们在任意一个 Fragment 里面创建一点内容，这里以一个带颜色的 View 和原本自带的文字为例，View 我设置宽高均匹配父元素，把文本放到了底部的位置，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    tools:context&#x3D;&quot;.ui.home.HomeFragment&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;View</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:background&#x3D;&quot;@color&#x2F;colorAccent&quot; &#x2F;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;text_home&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginStart&#x3D;&quot;8dp&quot;</span><br><span class="line">        android:layout_marginTop&#x3D;&quot;8dp&quot;</span><br><span class="line">        android:layout_marginEnd&#x3D;&quot;8dp&quot;</span><br><span class="line">        android:textAlignment&#x3D;&quot;center&quot;</span><br><span class="line">        android:textSize&#x3D;&quot;20sp&quot;</span><br><span class="line">        app:layout_constraintBottom_toBottomOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintEnd_toEndOf&#x3D;&quot;parent&quot;</span><br><span class="line">        app:layout_constraintStart_toStartOf&#x3D;&quot;parent&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure><p>在编辑器里面预览的效果是这样：</p><p><img src="/img/posts/uRZHe4.png" alt="效果预览"></p><p>现在，让我们再次启动程序，就会发现，View 的上方少了一块，本该在底部的文字也不见了。</p><p><img src="/img/posts/FTBv2S.png" alt="错误效果"></p><h1 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h1><p><img src="/img/posts/MWZ8hL.png" alt="位置错误"></p><p>可以看到，Fragment 的上方是没有跟父级元素贴合的，这个就导致了 Fragment 没有跟上方贴合。</p><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>一番 Google 后并没找到什么别人的解决方案，就自己在项目里到处看，最后发现，在 <code>activity_main.xml</code> 中的外层框架，有个属性 <code>android:paddingTop=&quot;?attr/actionBarSize&quot;</code> ，意思是在上方空出空间给 Action Bar ，而这个代码本身的 Action Bar 并不需要预留空间，所以去掉这个就好了。</p><p>现在的效果就是这样：</p><p><img src="/img/posts/TN5WAX.png" alt="错误一半效果"></p><p>诶？文字呢？怎么文字还是看不到？</p><p>再回去编辑器里看，发现底部的导航栏其实是覆盖在 Fragment 上的，也就是说文字被这个挡住了，那再来一个 padding 吧，这次加给 Fragment 就好了， <code>android:layout_marginBottom=&quot;?attr/actionBarSize&quot;</code> ，导航栏的高度是跟顶部 Action Bar 一样的。</p><p>这下子就没问题了：</p><p><img src="/img/posts/GCOm1W.png" alt="正确效果"></p><p>以上就是修正 BottomNavigationView 中 Fragment 位置错误的完整过程啦，其实就是水博客。（</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在玩 Android Studio 里面的 BottomNavigationView ，在使用的时候发现了一点问题，自动创建的 Fragment 位置会偏下，研究了一下，找到了修复位置错误的办法。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://blog.xmuu.dev/categories/Android/"/>
    
    
    <category term="Android" scheme="https://blog.xmuu.dev/tags/Android/"/>
    
    <category term="Java" scheme="https://blog.xmuu.dev/tags/Java/"/>
    
    <category term="BottomNavigationView" scheme="https://blog.xmuu.dev/tags/BottomNavigationView/"/>
    
    <category term="Fragment" scheme="https://blog.xmuu.dev/tags/Fragment/"/>
    
  </entry>
  
  <entry>
    <title>坚果 Pro 3 以及 Smartisan OS 7.2.2.1 开箱体验</title>
    <link href="https://blog.xmuu.dev/2020/02/28/using-smartisan-nut-pro-3-running-smartisan-os-7-2-2-1/"/>
    <id>https://blog.xmuu.dev/2020/02/28/using-smartisan-nut-pro-3-running-smartisan-os-7-2-2-1/</id>
    <published>2020-02-28T06:57:56.000Z</published>
    <updated>2021-02-05T16:51:48.800Z</updated>
    
    <content type="html"><![CDATA[<p>最终还是入手了又一部坚果。</p><a id="more"></a><p>因为受够了 EMMC 5.1 的缓慢，在家又抑制不住剁手之力，于是在苏宁天猫店购入了这台 Pro 3 ，换掉手上的 Pro 2S 。算起来这个已经是手上第三台坚果 Pro 系列手机了。一起来看看没有了罗老师的坚果手机，会是什么样吧。</p><h1 id="手机外观"><a href="#手机外观" class="headerlink" title="手机外观"></a>手机外观</h1><p>废话不多说，先看东西，图不多，就几张。（没什么拍照的好环境，就随手拍了两张，下次好好拍www</p><p><img src="/img/posts/TFA0pV.jpg" alt="裸机背面"><br><img src="/img/posts/XeDBGl.jpg" alt="保护套背面"></p><blockquote><p>竖条方案，化整为零，将各种元素打散，搭配附加元素，统一特征造型，调整间距，得到乱中有序的造型</p></blockquote><p>终于用上了锤科的白色机子。这次白色机子不会太贵，我买的时候苏宁/官网折扣价叠加优惠券大概是 2449/2499 ，而且苏宁有 24 期免息，<del>简直就是不要钱</del>。（敲</p><p>正面就没什么好说的了，刘海屏，还有点下巴，千元机水平，不过还好有个屏下指纹，显示效果也还算可以，就勉强接受了。</p><p><img src="/img/posts/x3CZDo.jpg" alt="正面亮屏"></p><h1 id="上手手感"><a href="#上手手感" class="headerlink" title="上手手感"></a>上手手感</h1><p>侧面类似 iPhone 4S 的三层结构，加上 6.39 英寸的屏幕，对我来说还是挺大的，上半部分的屏幕需要变换手势才能碰到，不过这个在之前用别的手机的时候就习惯了，没啥好说的。但是这次 Pro 3 的大 R 角给了我一定的缓解，在变换手势的时候不会那么难受，而且得益于侧边比较宽的边框，手心的肉不会按到屏幕了，突然开心。（（（</p><p><img src="/img/posts/iMwXBA.jpg" alt="侧面四边"></p><p>重量的话，看官网参数是要比坚果 Pro 2S 重上 20 克，但是实际上手感觉也差不多。</p><p>这部分大概就是这样了吧，待我多用几天看看有没有新的体验。</p><h1 id="系统体验"><a href="#系统体验" class="headerlink" title="系统体验"></a>系统体验</h1><p>Smartisan OS （以下简称 SOS ）从诞生至今一直饱受争议，如今更新到 7.0 的大版本，来看看现在的它又怎样。</p><blockquote><p>因为博客图片样式受限，本文放的都是拼接压缩后的图片，稍后会有另外一篇文章是截图原图。</p></blockquote><p><img src="/img/posts/pJZiaO.jpg" alt="锁屏"></p><p><img src="/img/posts/h26HlB.jpg" alt="桌面"></p><p><img src="/img/posts/fDNZ6a.jpg" alt="设置"></p><p><img src="/img/posts/UkXMhv.jpg" alt="其他应用程序"></p><p>如果之前有使用过 SOS 的话，可以发现这次升级可谓是大改动。整体的风格都往活泼的方向调整， 显得更有活力。新的字体 Smartisan T 黑的使用，使得整体的可读性有所提高，字重效果也得到了完善（虽然据说在一些地方字重还是有问题）。</p><p>这次 UI 调整里，我最喜欢的就是天气应用的调整和输入法的调整。天气不仅增加了增加了信息量，美观性也提高了很多；输入法这套新皮肤可以说非常适合 SOS 7.0 的整体风格，反正我看了是很有打字的想法。</p><p><img src="/img/posts/95OMsz.jpg" alt="天气与输入法"></p><p>SOS 是出了名的固执，但是其实在 7.0 版本中，也是有很多听取意见的地方，比如音量控制面板、状态栏的亮度调节，都为大众做了适配。不过我个人是不太喜欢这次改动，这个格状的进度条其实跟系统显得有点格格不入，如果能换回原来那种条形进度条再加以修饰应该会更好看些。</p><p><img src="/img/posts/5ham0S.jpg" alt="音量控制"></p><p><img src="/img/posts/aHvs7S.jpg" alt="状态栏"></p><p>通知管理也跟上了 Android 大版本的步伐，支持根据通知的类型来分类设置，可以定向屏蔽掉一些通知。（但是快捷操作那些你也跟上啊喂！）这次也有游戏模式之类的，而且这次不再是之前的清理内存然后关闭 VPN 之类的了，有了一个侧边栏，通知消息的模式也可以更改，应该算是一个比较游戏的游戏模式了。</p><p><img src="/img/posts/wGZQ2L.jpg" alt="通知管理与游戏模式"></p><p>剩下的就是 SOS 的一点特色功能了。</p><ul><li>新版一步真的蛮好用的，真前台，随意切换www 。以前的拖拽功能在这个控制台的加持下，效率进一步提升。</li><li>系统截图，短按快捷键直接保存，长按快捷键可以调出如下编辑界面，除了长截图、套手机壳、涂鸦和分享原有的几个功能以外，新版还加入了二维码识别，方便不少。</li><li>第三个就是今年的特色功能，识别系统声音并转换为文字，平时关掉声音看无字幕的视频也没问题了。</li></ul><p><img src="/img/posts/QpUxI4.jpg" alt="特色功能"></p><p>以及一些人性化的优化和细节。</p><ul><li><p>锁屏单击空白处可以隐藏时间等其他挡住壁纸的元素，这样就不担心老婆被挡住了！（敲</p><p><img src="/img/posts/6hy3cM.jpg" alt="锁屏隐藏时间"></p></li><li><p>短信的操作逻辑也更符合一些操作直觉。</p><p><img src="/img/posts/BqHKnb.jpg" alt="短信"></p></li></ul><p>系统大概就看到这里吧，到时候看看需不需要写一篇深度的系统体验。</p><h1 id="其他感受"><a href="#其他感受" class="headerlink" title="其他感受"></a>其他感受</h1><ul><li><p>整机：<br>上手使用了两天，对这一代手机还是比较满意的，硬件基本达到主流旗舰水平，品控也是相对较好，没有遇到什么很奇怪的问题，系统优化也是做足了，日常使用没有遇到卡顿之类的问题，不过有时候会感觉网速慢，不知是家里的网络问题还是手机的问题，之前使用 Pro 2S 是没问题的，过阵子再检测一下问题吧。</p></li><li><p>续航：<br>使用锤子手机的时候一直不会在意续航，即使手机只有 50% 的电量我也会直接出门，这次 Pro 3 的续航也算中规中矩吧，虽然不是用着主打低功耗的 CPU ，但是使用起来也不会说续航多差，估计新机都是这样吧，过阵子看看如何。</p></li><li><p>相机：<br>能拍照，功能多，具体出片等下次。</p></li></ul><h1 id="个人残念"><a href="#个人残念" class="headerlink" title="个人残念"></a>个人残念</h1><p>拿到新机是挺开心的，但是还是有些不满：</p><ul><li><p>盒子里面配送的充电套装是 18W USB A 口的充电器和对应的数据线，不是 C 口的充电器，有点可惜。</p></li><li><p>出厂贴膜不是很好，疏油效果一般，容易沾指纹。</p></li><li><p>屏幕边框有一点点瑕疵，SIM 卡托于卡槽之间的间隙有点大。</p></li></ul><p>除了机子外部的一些不满之外，系统也有些细节令我不开心：</p><ul><li><p>桌面下滑默认是搜索且不能关闭，希望能增加一个开关，甚至能改成下拉状态栏。</p></li><li><p>计算器依旧不能显示历史计算记录，上方的一大块空白就是空白。</p></li><li><p>系统流量统计依旧无法自定义统计周期，只能按照自然月开始，就别说支持日租卡等其他类型的流量套餐了。</p></li><li><p>锁屏抖音的开关有点隐蔽，而且，位置不太对，在设置桌面壁纸的地方也可以设置。</p></li><li><p>系统自带浏览器的版本还是 Chromium 62 ，历史遗留问题了。</p></li></ul><p>看起来还是蛮多的，希望后面能慢慢改进吧。</p><h1 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h1><p>坚果 Pro 3 作为经历各种风波后的回归之作，可以看的出团队的目标已经有所改变，这个改变是为了生存而作出的改变，只有生存下去了，才能做自己想做的。不过希望在改变的同时，能坚持初心，将原本好的东西坚持下来。</p><p>坚果 Pro 3 是一部合格的手机，有着合格的硬件、合格的操作系统和合理的价格，但是注定是不会被大众广泛接受的手机。在方方面面还有着各种妥协各种瑕疵，但是这些都是可以被克服或者修正的，期待后面的完善吧。</p><p>坚果 Pro 3 ，你好。❤️</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最终还是入手了又一部坚果。&lt;/p&gt;</summary>
    
    
    
    <category term="Daily" scheme="https://blog.xmuu.dev/categories/Daily/"/>
    
    
    <category term="Android" scheme="https://blog.xmuu.dev/tags/Android/"/>
    
    <category term="Smartisan OS" scheme="https://blog.xmuu.dev/tags/Smartisan-OS/"/>
    
    <category term="坚果 Pro 3" scheme="https://blog.xmuu.dev/tags/%E5%9D%9A%E6%9E%9C-Pro-3/"/>
    
    <category term="开箱体验" scheme="https://blog.xmuu.dev/tags/%E5%BC%80%E7%AE%B1%E4%BD%93%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitHub Pages 和 Travis CI 搭建自动构建的 Hexo 博客</title>
    <link href="https://blog.xmuu.dev/2020/02/22/build-a-hexo-blog-with-github-pages-and-travis-ci/"/>
    <id>https://blog.xmuu.dev/2020/02/22/build-a-hexo-blog-with-github-pages-and-travis-ci/</id>
    <published>2020-02-22T15:29:02.000Z</published>
    <updated>2021-02-05T16:51:48.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Hexo 是个好东西，GitHub Pages 也是个好东西，那如何将这两个好东西放在一起用呢？那就是用 Travis CI 了。</p><a id="more"></a><p>本文的目的是使用 Travis CI 来自动生成并提交 Hexo 生成的静态页面到 GitHub Pages 仓库。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>一个良好的网络</li><li>一个 <a href="https://github.com/">GitHub</a> 账号</li><li>配置好 Git </li><li>参考 Hexo 文档装好 hexo-cli （<a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85">文档地址</a>）</li></ul><h2 id="启用-Travis-CI"><a href="#启用-Travis-CI" class="headerlink" title="启用 Travis CI"></a>启用 Travis CI</h2><p>使用 GitHub 账号登录 <a href="https://travis-ci.com/">Travis CI</a> ，授权 Travis CI 获取 GitHub 账户的资料。完成后，会跳转到 Travis CI 的页面，页面里面应该会提示你 <strong>Activate all repositories using GitHub Apps</strong> （对所有 GitHub 项目启用 Travis CI 自动构建），点击按钮后授权，以后新建的项目就都会自动启用 Travis CI 了。</p><h2 id="创建-GitHub-Repositories"><a href="#创建-GitHub-Repositories" class="headerlink" title="创建 GitHub Repositories"></a>创建 GitHub Repositories</h2><p>在 GitHub 上创建 GP 仓库（仓库名为 GitHub 用户名 + <code>.github.io</code> ）和博客源码仓库（以下为 <code>blog-factory</code> ），均设置为公开仓库即可。</p><blockquote><p><em>Note</em>: 如果你不被人看到源码，那源码仓库也可以为私密仓库，但是 Travis CI 的自动构建只对公开仓库免费，私密仓库据说只有前一百次免费。</p></blockquote><p>创建完仓库后，将源码仓库克隆至本地。</p><h2 id="准备博客源码"><a href="#准备博客源码" class="headerlink" title="准备博客源码"></a>准备博客源码</h2><ul><li>在本地创建一个空文件夹（这里为 <code>blog-temp</code> ），用来生成博客的源码。</li></ul><blockquote><p><em>Note</em>: 之所以要另起一个文件夹是因为 Hexo 的 init 指令只能作用于空文件夹。</p></blockquote><ul><li>在终端中打开 <code>blog-temp</code> 并执行以下命令：<br><code>hexo init .</code><br>执行完毕后，将 <code>blog-temp</code> 的内容复制到源码仓库 <code>blog-factory</code> 的文件夹中。（ <code>.git</code> 文件夹不要复制。）</li></ul><h2 id="修改博客配置"><a href="#修改博客配置" class="headerlink" title="修改博客配置"></a>修改博客配置</h2><p>Hexo 博客的配置文件是项目根目录的 <code>_config.yml</code> ，根据需求修改配置文件。<br>如果要安装主题、插件之类，也在这里配置好。</p><h2 id="测试博客"><a href="#测试博客" class="headerlink" title="测试博客"></a>测试博客</h2><ul><li>执行 <code>hexo server --debug</code><br>确认是否能正常生成博客文件。</li><li>访问 <a href="http://localhost:4000/">http://localhost:4000</a><br>确定博客能正常访问，没有 404 或者其他错误。</li></ul><p>完成后 Ctrl + C 结束进程，执行 <code>hexo clean</code> 清理无用文件。</p><h2 id="编写-Travis-CI-配置文件"><a href="#编写-Travis-CI-配置文件" class="headerlink" title="编写 Travis CI 配置文件"></a>编写 Travis CI 配置文件</h2><p>在项目根目录创建文件 <code>.travis.yml</code> 。（注意，是以 <strong>.</strong> 开头的文件，在一些文件管理器中可能不会直接显示，需要打开相关设置。）<br>接下来在这个文件里面写入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">language: node_js # 设置语言类型</span><br><span class="line">node_js: stable # 选择版本</span><br><span class="line">sudo: false # 设置权限</span><br><span class="line"></span><br><span class="line">branches: # 设置触发 CI 运行的分支</span><br><span class="line">  only:</span><br><span class="line">    - source</span><br><span class="line"></span><br><span class="line">cache: # 设置缓存，可以有效提高 CI 编译的速度</span><br><span class="line">  directories:</span><br><span class="line">    - node_modules</span><br><span class="line"> </span><br><span class="line">before_install: # 设置在安装之前的一些操作</span><br><span class="line">  - export TZ&#x3D;&#39;Asia&#x2F;Shanghai&#39; # 设置时区，于本地时间同步，防止一些时间的错误</span><br><span class="line"></span><br><span class="line">install: # 安装需要的工具</span><br><span class="line">  - npm install -g hexo-cli # 安装 Hexo </span><br><span class="line">  - npm install # 安装 Hexo 依赖</span><br><span class="line">  # 如果有需要安装的插件，或者是主题需要安装的依赖，也一并在在这里安装</span><br><span class="line">  # 切换目录后最终需要回到根目录，注意返回</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - hexo g # 生成静态 HTML 文件</span><br><span class="line"></span><br><span class="line">after_script:</span><br><span class="line">  - cd .&#x2F;public</span><br><span class="line">  - git init</span><br><span class="line">  - git config user.name &quot;$&#123;GH_NAME&#125;&quot;</span><br><span class="line">  - git config user.email &quot;$&#123;GH_EMAIL&#125;&quot;</span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m &quot;Travis CI Auto Builder at $(date +&#39;%Y-%m-%d %H:%M:%S&#39;)&quot;</span><br><span class="line">  - git push --force --quiet &quot;https:&#x2F;&#x2F;$&#123;GH_TOKEN&#125;@$&#123;GH_REPO&#125;&quot; master:master</span><br></pre></td></tr></table></figure><p>这样，整个构建和推送的流程脚本就编写完成了，到时候 Travis CI 就会按照上面的顺序执行，将生成的 HTML 文件推送到指定仓库指定分支。</p><h2 id="生成-GitHub-Token"><a href="#生成-GitHub-Token" class="headerlink" title="生成 GitHub Token"></a>生成 GitHub Token</h2><p>打开 Github 的 <a href="https://github.com/settings/">Settings</a> 页面，点击左边的 <strong>Developer settings</strong> ，然后选择 <strong>Personal access tokens</strong> ，点击 Generate new token ，生成一个 Token 。<br>在新页面中填入 Note ，设置一个名字或者其他有助于你记忆这个 Token 用途的信息，然后勾选下方 <strong>repo</strong> 的勾，会连带勾上四个子选项。<br>之后就拉到最下面直接保存，在新页面中会显示这个 token ，保存好，下一步要用到。</p><h2 id="设置-Travis-CI-环境变量"><a href="#设置-Travis-CI-环境变量" class="headerlink" title="设置 Travis CI 环境变量"></a>设置 Travis CI 环境变量</h2><p>在上面的配置文件中，出现了 <code>$&#123;GH_NAME&#125;</code> ， <code>$&#123;GH_EMAIL&#125;</code> ， <code>$&#123;GH_TOKEN&#125;</code> ， <code>$&#123;GH_REPO&#125;</code> 这几个字符串，其实这个是 Travis CI 的变量引用，在执行的时候会被自动替换成已经设置好的值，现在就要来设置这几个值。</p><ul><li><p>打开 <a href="https://travis-ci.com/">Travis CI</a> ，登录后点击右上角设置，在设置界面可以看到 GitHub 里面所有的 Repositories ，如果没有，请检查你的授权，让 Travis CI 可以获取到你的 Repositories 。</p></li><li><p>点击 <code>blog-factory</code> 右边的设置按钮，可以看到设置的页面，里面有一项名为 Environment Variables 的设置类。</p></li><li><p>依次添加名为 <code>GH_NAME</code> ， <code>GH_EMAIL</code> ， <code>GH_TOKEN</code> ，<code>GH_REPO</code> ，填入对应的值。</p><table><thead><tr><th align="left">NAME</th><th align="left">VALUE</th></tr></thead><tbody><tr><td align="left"><code>GH_NAME</code></td><td align="left"><code>xMuu</code></td></tr><tr><td align="left"><code>GH_EMAIL</code></td><td align="left"><code>mail@mail.com</code></td></tr><tr><td align="left"><code>GH_TOKEN</code></td><td align="left"><code>421ddfe66ed5a56ba19d6d1e1***************</code></td></tr><tr><td align="left"><code>GH_REPO</code></td><td align="left"><code>github.com/xMuu/xmuu.github.io</code></td></tr></tbody></table></li></ul><blockquote><p><em>Note</em> : <code>GH_TOKEN</code> 应该保存好，避免泄漏，在设置的时候不要打开 <strong>DISPLAY VALUE IN BUILD LOG</strong> 。</p></blockquote><h2 id="上传博客源码"><a href="#上传博客源码" class="headerlink" title="上传博客源码"></a>上传博客源码</h2><p>首先整理一下目录的内容，删除没有用的各种文件。顺便执行一次 Hexo 的清理程序：<br><code>hexo clean</code><br>之后，检查安装的主题，是否有 <code>.git</code> 文件夹，有的话需要删除。<br>一切检查完毕后就在 <code>blog-factory</code> 目录下，执行以下命令，将博客源码上传至 GitHub 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;upload blog source&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h2><p>上传过后，可以到 Travis CI 看看构建的过程，也可以直接等待 Travis CI 的邮件然后访问 GitHub Pages 查看结果。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="1-主题有-npm-依赖"><a href="#1-主题有-npm-依赖" class="headerlink" title="1. 主题有 npm 依赖"></a>1. 主题有 npm 依赖</h3><p>如果主题需要安装 npm 依赖，如果依赖多的话，建议在 Travis CI 构建的时候使用 <code>npm install</code> 安装，记得在上传源码的时候在 <code>.gitignore</code> 中排除主题目录下的 <code>node_modules</code> 文件夹；不多的话则可以直接将 <code>node_modules</code> 附带上去。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Hexo 是个好东西，GitHub Pages 也是个好东西，那如何将这两个好东西放在一起用呢？那就是用 Travis CI 了。&lt;/p&gt;</summary>
    
    
    
    <category term="Tech" scheme="https://blog.xmuu.dev/categories/Tech/"/>
    
    
    <category term="Hexo" scheme="https://blog.xmuu.dev/tags/Hexo/"/>
    
    <category term="GitHub" scheme="https://blog.xmuu.dev/tags/GitHub/"/>
    
    <category term="Travis CI" scheme="https://blog.xmuu.dev/tags/Travis-CI/"/>
    
  </entry>
  
  <entry>
    <title>利用 UUP Dump 下载 Windows 镜像</title>
    <link href="https://blog.xmuu.dev/2020/01/27/use-uup-dump-to-download-windows-install-image/"/>
    <id>https://blog.xmuu.dev/2020/01/27/use-uup-dump-to-download-windows-install-image/</id>
    <published>2020-01-27T14:30:00.000Z</published>
    <updated>2021-02-05T16:51:48.800Z</updated>
    
    <content type="html"><![CDATA[<p>最近被安利回 Windows ，感觉还是不错的。<br>在回来的路上，兔子推荐了 <a href="https://uupdump.ml/">UUP Dump</a> 这个网站，可以很方便地下载 Windows 镜像（Insider 版本），感觉还是不错的，比从微软官方下载或者 itellyou 上的 ed2k 都要方便很多。写一点推荐一下。</p><a id="more"></a><p>打开网站就可以看到很多版本的 Windows 镜像，也可以通过搜索来获取指定版本的镜像。（可能需要手动设置一下才会显示中文）</p><img src="https://i.loli.net/2020/01/27/drp9gMDOofXkHNF.png" ><p>以搜索 19041.21 这个版本为例，我们可以看到搜索出来了这些结果，分别对应了桌面版、服务器、不同架构的镜像。一般选择 Windows 开头的 Insider 版本即可。</p><img src="https://i.loli.net/2020/01/27/cdsqSONruaQnKRB.png" ><p>接下来就是对镜像的内容进行一些设置，比如语言、系统版本、集成内容等。语言选中文就可以啦。然后版本的话，没有特殊需要的话直接选单个的 Pro 就好啦，可以缩小镜像的大小。在第三个设置页面里，先选择第三个下载方式，可以增加一些其他版本的安装选项和一些附加内容，比如企业版、教育版、专业工作站版， .Net 3.5 框架等等，我一般会选择安装企业版，因为可以关闭的选项会比其他的版本多。</p><img src="https://i.loli.net/2020/01/27/TwQ7nAV6uqiP3vr.png" ><img src="https://i.loli.net/2020/01/27/DPCSOiM8qLJarju.png" ><img src="https://i.loli.net/2020/01/27/uMA6DQVm3KaOt8H.png" ><p>设置完成后，会下载一个压缩包，里面包含了刚才所选的配置和下载工具，以及下载脚本（bat 和 sh 两种格式），这个脚本会下载需要的文件然后合成一个 ISO 文件，这个文件就是 Windows 的安装镜像了，挂载提取到 FAT32 格式的 U 盘中，通过 U 盘启动就可以开始安装系统了。</p><img src="https://i.loli.net/2020/01/27/Y3CsFRq1vJphlc9.png" ><blockquote><p>注：在 Linux/macOS 环境下可能会缺失一些工具，需要手动安装。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近被安利回 Windows ，感觉还是不错的。&lt;br&gt;在回来的路上，兔子推荐了 &lt;a href=&quot;https://uupdump.ml/&quot;&gt;UUP Dump&lt;/a&gt; 这个网站，可以很方便地下载 Windows 镜像（Insider 版本），感觉还是不错的，比从微软官方下载或者 itellyou 上的 ed2k 都要方便很多。写一点推荐一下。&lt;/p&gt;</summary>
    
    
    
    <category term="Tech" scheme="https://blog.xmuu.dev/categories/Tech/"/>
    
    
    <category term="Windows" scheme="https://blog.xmuu.dev/tags/Windows/"/>
    
    <category term="安利" scheme="https://blog.xmuu.dev/tags/%E5%AE%89%E5%88%A9/"/>
    
  </entry>
  
  <entry>
    <title>安装 Arch Linux 后的一点微小的工作</title>
    <link href="https://blog.xmuu.dev/2019/12/30/some-tweaks-after-install-arch-linux/"/>
    <id>https://blog.xmuu.dev/2019/12/30/some-tweaks-after-install-arch-linux/</id>
    <published>2019-12-30T07:57:00.000Z</published>
    <updated>2021-02-05T16:51:48.800Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下安装 Arch 之后一些需要的操作。</p><a id="more"></a><h2 id="开机前禁用-N-卡开源驱动并用-bbswitch-禁用-N-卡"><a href="#开机前禁用-N-卡开源驱动并用-bbswitch-禁用-N-卡" class="headerlink" title="开机前禁用 N 卡开源驱动并用 bbswitch 禁用 N 卡"></a>开机前禁用 N 卡开源驱动并用 bbswitch 禁用 N 卡</h2><blockquote><p>Fxxk NVIDIA～（</p></blockquote><p>这一步是解决一些机子开机卡住的问题，并关闭 N 卡提高使用体验（解决发热 &amp; 提高续航）。</p><ul><li>首先禁用 nouveau 驱动<br> <code>sudo nano /etc/modprobe.d/blacklist-nouveau.conf</code><br> 输入 <code>blacklist nouveau</code> 并保存</li><li>安装 bbswtich<br> <code>sudo pacman -S bbswitch</code></li><li>接着新建配置文件 <code>/etc/modprobe.d/bbswitch.conf</code><br> <code>sudo nano /etc/modprobe.d/bbswitch.conf</code><br> 写入 <code>options bbswitch load_state=0</code> 并保存</li><li>再新建一个配置文件 <code>/etc/modules-load.d/bbswitch.conf</code><br> <code>sudo nano /etc/modules-load.d/bbswitch.conf</code><br> 写入 <code>bbswitch</code> 并保存</li></ul><p>这样开机就会加载 bbswitch 模块并关闭 N 卡了。</p><h2 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h2><ul><li><code>sudo pacman -S zsh</code> <blockquote><p>oh-my-zsh 用脚本装可以直接获取更新不用等打包。<br> 添加用户的时候加上参数 <code>-s /bin/zsh</code> 即可将默认 shell 设置为 zsh 。</p></blockquote></li></ul><h2 id="配置国内镜像源和第三方仓库"><a href="#配置国内镜像源和第三方仓库" class="headerlink" title="配置国内镜像源和第三方仓库"></a>配置国内镜像源和第三方仓库</h2><ul><li>编辑 <code>/etc/pacman.conf</code><br> <code>sudo nano /etc/pacman.conf</code></li><li>Misc options 中取消 <code>Color</code> ， <code>TotalDownload</code> ， <code>VerbosePkgLists</code> 的注释</li><li>取消下方 <code>multilib</code> 的两行注释，注意不是 <code>testing</code> 那两行</li><li>在文件的最下方添加   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinuxcn&#x2F;$arch</span><br><span class="line">   </span><br><span class="line">[arch4edu]</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;arch4edu&#x2F;$arch</span><br></pre></td></tr></table></figure></li><li>保存后执行 <code>sudo pacman -Syy</code> 更新软件源数据库即可</li></ul><blockquote><p>archlinuxcn : Arch Linux CN 源，作为官方社区源的补充，上面有很多官方源没有的软件包，还有些国内特色的包。<br>arch4edu : 面向高校用户推出的非官方软件仓库，主要包含高校用户常用的科研、教学及开发软件。</p></blockquote><h2 id="安装桌面环境以及一些其他东西"><a href="#安装桌面环境以及一些其他东西" class="headerlink" title="安装桌面环境以及一些其他东西"></a>安装桌面环境以及一些其他东西</h2><blockquote><p>我是坚定的 KDE 党！（</p></blockquote><p><code>sudo pacman -S plasma konsole dolphin</code> # 如果有选项记得选 vlc<br><code>sudo pacman -Rcun discover</code> # 删除自带的商店，不删也行，但是这东西真的没啥用<br><code>sudo pacman -S pulseaudio-bluetooth alsa-plugins alsa-utils</code><br><code>sudo systemctl enable sddm</code><br><code>sudo systemctl enable NetworkManager</code></p><h2 id="配置中文字体"><a href="#配置中文字体" class="headerlink" title="配置中文字体"></a>配置中文字体</h2><p>中文字体我选择了 Apple 的苹方字体（中文）搭配 SF-Pro （西文）这套解决方案。具体可以看<a href="https://github.com/xMuu/arch-kde-fontconfig">这个</a>。</p><h2 id="设置系统为中文"><a href="#设置系统为中文" class="headerlink" title="设置系统为中文"></a>设置系统为中文</h2><ul><li>先编辑配置文件 <code>/etc/locale.conf</code><br> <code>sudo nano /etc/locale.gen</code></li><li>取消掉 <code>en_GB.UTF-8</code>， <code>en_US.UTF-8</code>， <code>zh_CN.UTF-8</code> 的注释</li><li>执行 <code>sudo locale-gen</code></li><li>编辑 <code>/etc/locale.conf</code><br> <code>sudo nano /etc/locale.conf</code></li><li>添加下面内容并保存 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LC_TIME&#x3D;en_GB.UTF-8</span><br><span class="line">LC_COLLATE&#x3D;C</span><br></pre></td></tr></table></figure></li><li>在 KDE 中设置语言为中文，退出登陆后重启即可</li></ul><h2 id="安装输入法"><a href="#安装输入法" class="headerlink" title="安装输入法"></a>安装输入法</h2><ul><li>输入法这里选择 fcitx5 ，因为对 KDE 友好，而且也足够好用<br> <code>sudo pacman -S fcitx5-git fcitx5-gtk-git fcitx5-qt5-git fcitx5-chinese-addons-git kcm-fcitx5-git</code><br> 这里安装的都是 CN 源上的版本，因为更新的比较快，功能齐全。最后一个 <code>kcm-fcitx5-git</code> 是在 KDE 上的输入法配置面板。</li><li>编辑 <code>~/.pam_environment</code><br> <code>nano ~/.pam_environment</code></li><li>添加下面内容并保存 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GTK_IM_MODULE&#x3D;fcitx5</span><br><span class="line">QT_IM_MODULE&#x3D;fcitx5</span><br><span class="line">XMODIFIERS&#x3D;@im&#x3D;fcitx5</span><br></pre></td></tr></table></figure></li><li>安装完成后在 KDE 的系统设置里面，区域设置，输入法，添加 <code>pinyin</code> 到左边然后应用，就能使用拼音了，当然了还有五笔等一些输入方式，可以自己选</li></ul><h2 id="配置-Intel-核显-VA-API-以及-Chromium-的硬件加速"><a href="#配置-Intel-核显-VA-API-以及-Chromium-的硬件加速" class="headerlink" title="配置 Intel 核显 VA-API 以及 Chromium 的硬件加速"></a>配置 Intel 核显 VA-API 以及 Chromium 的硬件加速</h2><p>通过配置硬件加速，可以获得不错的浏览体验以及视频体验。</p><ul><li><p>先安装相应的驱动：<br> <code>pacman -S vulkan-intel intel-media-driver libva-utils</code></p></li><li><p>编辑 <code>~/.pam_environment</code><br> <code>nano ~/.pam_environment</code></p></li><li><p>写入以下内容并保存。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIBVA_DRIVER_NAME&#x3D;iHD</span><br></pre></td></tr></table></figure></li><li><p>退出登陆后重新登陆，运行 <code>vainfo</code> ，如果没错误的话，应该会有这样的输出：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vainfo: VA-API version: 1.6 (libva 2.5.0)</span><br><span class="line">vainfo: Driver version: Intel iHD driver - 1.0.0 vainfo: Supported</span><br><span class="line">profile and entrypoints</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>接下来就开始安装 Chromiun 并启用一些参数使得硬件加速全开。</p></li><li><p>安装支持硬件加速版本的 Chromiun<br> <code>pacman -S chromium-vaapi</code><br> 这个为 AUR 包，但是在 Arch Linux CN 源有已经编译打包好的，直接安装 CN 源上的就好了。</p></li><li><p>新建配置文件 <code>~/.config/chromium-flags.conf</code> ：<br> <code>nano ~/.config/chromium-flags.conf</code></p></li><li><p>写入 <code>--ignore-gpu-blacklist</code> 并保存退出。（如果原来这个文件存在要确定不能有 <code>--use-gl=egl</code> 这个参数）</p></li><li><p>打开 Chromium 并打开 <a href="about://flags"><code>about://flags</code></a> 。</p></li><li><p>搜索并启用 <code>GPU rasterization</code> ， <code>Out of process rasterization</code> ， <code>Zero-copy rasterizer</code> ， <code>Viz Hit-test SurfaceLayer</code> ， <code>Skia API for OOP-D compositing</code> （如果找不到则忽略，可能被更新加入了）<br> 打开 <code>about://gpu</code> 如果看到以下输出，则说明配置完成</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Graphics Feature Status</span><br><span class="line">Canvas: Hardware accelerated</span><br><span class="line">Flash: Hardware accelerated</span><br><span class="line">Flash Stage3D: Hardware accelerated</span><br><span class="line">Flash Stage3D Baseline profile: Hardware accelerated</span><br><span class="line">Compositing: Hardware accelerated</span><br><span class="line">Multiple Raster Threads: Enabled</span><br><span class="line">Out-of-process Rasterization: Hardware accelerated</span><br><span class="line">Hardware Protected Video Decode: Hardware accelerated</span><br><span class="line">Rasterization: Hardware accelerated</span><br><span class="line">Skia Renderer: Enabled</span><br><span class="line">Video Decode: Hardware accelerated</span><br><span class="line">Viz Display Compositor: Enabled</span><br><span class="line">Viz Hit-test Surface Layer: Enabled</span><br><span class="line">Vulkan: Disabled</span><br><span class="line">WebGL: Hardware accelerated</span><br><span class="line">WebGL2: Hardware accelerated</span><br></pre></td></tr></table></figure><h2 id="切换-IO-调度器（可选）"><a href="#切换-IO-调度器（可选）" class="headerlink" title="切换 IO 调度器（可选）"></a>切换 IO 调度器（可选）</h2></li><li><p>新建文件 <code>/etc/udev/rules.d/60-ioschedulers.rules</code><br> <code>sudo nano /etc/udev/rules.d/60-ioschedulers.rules</code></p></li><li><p>写入下面内容并保存。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ACTION&#x3D;&#x3D;&quot;add|change&quot;, KERNEL&#x3D;&#x3D;&quot;sd[a-z]|mmcblk[0-9]*&quot;, ATTR&#123;queue&#x2F;rotational&#125;&#x3D;&#x3D;&quot;0&quot;, ATTR&#123;queue&#x2F;scheduler&#125;&#x3D;&quot;mq-deadline&quot;</span><br><span class="line">ACTION&#x3D;&#x3D;&quot;add|change&quot;, KERNEL&#x3D;&#x3D;&quot;sd[a-z]&quot;, ATTR&#123;queue&#x2F;rotational&#125;&#x3D;&#x3D;&quot;1&quot;, ATTR&#123;queue&#x2F;scheduler&#125;&#x3D;&quot;bfq&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="开启-SSD-Trim"><a href="#开启-SSD-Trim" class="headerlink" title="开启 SSD Trim"></a>开启 SSD Trim</h2><ul><li><code>sudo systemctl enable fstrim.timer</code></li></ul><hr><p><strong><del>大概就想到这么多，其他的以后补上。</del></strong></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>  换了 macOS(Hackintosh) 了，真香！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下安装 Arch 之后一些需要的操作。&lt;/p&gt;</summary>
    
    
    
    <category term="Tech" scheme="https://blog.xmuu.dev/categories/Tech/"/>
    
    
    <category term="Arch Linux" scheme="https://blog.xmuu.dev/tags/Arch-Linux/"/>
    
    <category term="Tweaks" scheme="https://blog.xmuu.dev/tags/Tweaks/"/>
    
  </entry>
  
</feed>
